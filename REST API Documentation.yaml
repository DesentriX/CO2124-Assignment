openapi: 3.0.3
info:
  title: Hospital Management API
  version: 1.0.0
  description: REST API documentation for managing patients, doctors, appointments, and medical records in your hospital system.
servers:
  - url: http://localhost:8080/api

tags:
  - name: Patients
    description: Everything about patients
  - name: Doctors
    description: Everything about doctors
  - name: Appointments
    description: Everything about appointments
  - name: Medical Records
    description: Everything about medical records

paths:
  /patients:
    get:
      tags:
        - Patients
      summary: List all patients
      description: List the information of all patients in the database.
      responses:
        '200':
          description: List of patients returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    email:
                      type: string
                    phoneNumber:
                      type: string
                    address:
                      type: string
        '400':
          description: Bad request
    post:
      tags:
        - Patients
      summary: Create a new patient
      description: Creates a new patient and adds them to the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phoneNumber:
                  type: string
                address:
                  type: string
              required:
                - name
                - email
                - phoneNumber
                - address
      responses:
        '201':
          description: Patient created successfully
        '400':
          description: Invalid input

  /patients/{id}:
    get:
      tags:
        - Patients
      summary: Retrieve a specific patient by ID
      description: Retrieves all the information for a specific patient using their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Patient successfully retrieved by id
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                  phoneNumber:
                    type: string
                  address:
                    type: string
        '404':
          description: Patient not found
    put:
      tags:
        - Patients
      summary: Update a specific patient by ID
      description: Updates a specific patient's information (using their ID).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phoneNumber:
                  type: string
                address:
                  type: string
              required:
                - name
                - email
                - phoneNumber
                - address
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Patient updated successfully
        '400':
          description: Invalid input
        '404':
          description: Patient not found
    delete:
      tags:
        - Patients
      summary: Delete a specific patient by ID
      description: Deletes a patient's information from the database using their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Patient deleted successfully
        '404':
          description: Patient not found

  /patients/{id}/appointments:
    get:
      tags:
        - Patients
      summary: List all appointments for a specific patient
      description: Returns an array of all appointments for a specific patient using their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of patient's appointments returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    appointmentDate:
                      type: string
                      format: date-time
                    status:
                      type: string
                    notes:
                      type: string
        '404':
          description: Patient not found

  /patients/{id}/medical-records:
    get:
      tags:
        - Patients
      summary: List all medical records for a specific patient
      description: Returns an array of all medical records for a specific patient using their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of patient's medical records returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    recordDate:
                      type: string
                      format: date-time
                    diagnosis:
                      type: string
                    treatment:
                      type: string
                    notes:
                      type: string
        '404':
          description: Patient not found

  /doctors:
    get:
      tags:
        - Doctors
      summary: List all doctors
      description: List the information of all doctors in the database.
      responses:
        '200':
          description: List of doctors returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    specialisation:
                      type: string
                    email:
                      type: string
                    phoneNumber:
                      type: string
        '400':
          description: Bad request
    post:
      tags:
        - Doctors
      summary: Create a new doctor
      description: Creates a new doctor and adds them to the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                specialisation:
                  type: string
                email:
                  type: string
                phoneNumber:
                  type: string
              required:
                - name
                - specialisation
                - email
                - phoneNumber
      responses:
        '201':
          description: Doctor created successfully
        '400':
          description: Invalid input

  /doctors/{id}:
    get:
      tags:
        - Doctors
      summary: Retrieve a specific doctor by ID
      description: Retrieves all the information for a specific doctor using their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Doctor successfully retrieved by id
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  specialisation:
                    type: string
                  email:
                    type: string
                  phoneNumber:
                    type: string

        '404':
          description: Doctor not found
    put:
      tags:
        - Doctors
      summary: Update a specific doctor by ID
      description: Updates a specific doctor's information (using their ID).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                specialisation:
                  type: string
                email:
                  type: string
                phoneNumber:
                  type: string
              required:
                - name
                - specialisation
                - email
                - phoneNumber
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Doctor updated successfully
        '404':
          description: Doctor not found
    delete:
      tags:
        - Doctors
      summary: Delete a specific doctor by ID
      description: Deletes a doctor's information from the database using their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Doctor deleted successfully
        '404':
          description: Doctor not found

  /doctors/{id}/appointments:
    get:
      tags:
        - Doctors
      summary: List all appointments for a specific doctor
      description: Returns an array of all appointments for a specific doctor using their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of doctor's appointments returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    appointmentDate:
                      type: string
                      format: date-time
                    status:
                      type: string
                    notes:
                      type: string
        '404':
          description: Doctor not found

  /appointments:
    get:
      tags:
        - Appointments
      summary: List all appointments
      description: List the information of all appointments in the database.
      responses:
        '200':
          description: List of all appointments returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    appointmentDate:
                      type: string
                      format: date-time
                    status:
                      type: string
                    notes:
                      type: string
        '400':
          description: Bad request
    post:
      tags:
        - Appointments
      summary: Create a new appointment
      description: Creates a new appointment and adds it to the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                appointmentDate:
                  type: string
                  format: date-time
                status:
                  type: string
                notes:
                  type: string
              required:
                - appointmentDate
                - status
      responses:
        '201':
          description: Appointment created successfully
        '400':
          description: Invalid input

  /appointments/{id}:
    get:
      tags:
        - Appointments
      summary: Retrieve a specific appointment by ID
      description: Retrieves all the information for a specific appointment using it's ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Appointment successfully retrieved by id
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  appointmentDate:
                    type: string
                    format: date-time
                  status:
                    type: string
                  notes:
                    type: string
        '404':
          description: Appointment not found
    put:
      tags:
        - Appointments
      summary: Update a specific appointment by ID
      description: Updates a specific appointment's information (using it's ID).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                appointmentDate:
                  type: string
                  format: date-time
                status:
                  type: string
                notes:
                  type: string
              required:
                - appointmentDate
                - status
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Appointment updated successfully
        '404':
          description: Appointment not found
    delete:
      tags:
        - Appointments
      summary: Delete a specific appointment by ID
      description: Deletes an appointment from the database using it's ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Appointment deleted successfully
        '404':
          description: Appointment not found

  /appointments/{id}/medical-record:
    get:
      tags:
        - Appointments
      summary: Retrieve the medical record for a specific appointment
      description: Returns an array of all medical records for a specific appointment using it's ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Medical record for appointment successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  recordDate:
                    type: string
                    format: date-time
                  diagnosis:
                    type: string
                  treatment:
                    type: string
                  notes:
                    type: string
        '404':
          description: Appointment or medical record not found

  /medical-records:
    post:
      tags:
        - Medical Records
      summary: Create a new medical record
      description: Creates a new medical record and adds it to the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recordDate:
                  type: string
                  format: date-time
                diagnosis:
                  type: string
                treatment:
                  type: string
                notes:
                  type: string
              required:
                - recordDate
                - diagnosis
                - treatment
      responses:
        '201':
          description: Medical record created successfully
        '400':
          description: Invalid input

components:
  schemas:
    Patients:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 10
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: johndoe@gmail.com
        phoneNumber:
          type: string
          example: 07520937123
        address:
          type: string
          example: 5 Willington Street, Bullington, NA9 7XC

    Doctors:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 10
        name:
          type: string
          example: Dr. Kehinde
        specialisation:
          type: string
          example: Neurology
        email:
          type: string
          example: drk@doctor-mail.com
        phoneNumber:
          type: string
          example: 07629510485

    Appointments:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 10
        appointmentDate:
          type: string
          format: date-time
          example: 2025-04-13 14:30:00
        status:
          type: string
          example: Scheduled
        notes:
          type: string
          example: Bring iodine dye contrast.
    
    Medical-Records:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 10
        recordDate:
          type: string
          format: date-time
          example: 2025-04-13 14:30:00
        diagnosis:
          type: string
          example: Tubercolosis
        treatment:
          type: string
          example: Calpol
        notes:
          type: string
          example: Deliver medication to John Doe on Monday.
